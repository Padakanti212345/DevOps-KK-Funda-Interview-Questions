Linux Interview questions
=========================


 IQ] A deployment fails because the server runs out of disk space. How do you identify and resolve the issue?

Answer:

- Identify the problem:

  1. Use `df -h` to check the available disk space on the server. This shows the mounted filesystems and their usage.
  2. If disk space is low, use `du -sh /*` to identify which directories are consuming the most space.
  3. Alternatively, you can use `du -ah / | sort -rh | head -n 20` to find the top 20 largest files and directories.

- Resolve the problem:
  - Clean up unnecessary files, logs, or temporary files. For example:
    1. Delete or compress old log files in `/var/log/`.
    2. Clear package cache using `sudo apt-get clean` (for Ubuntu/Debian) or `sudo yum clean all` (for CentOS/RedHat).
    3. Identify and remove unused files or old backups.

==================================================

 IQ] After a server reboot, a critical service fails to start. How would you troubleshoot this?

Answer:
1. Check the service status:
   - Run `systemctl status <service_name>` to check the status of the service and get logs.
   
2. View logs for the service:
   - Use `journalctl -u <service_name>` to view detailed logs related to the service.
   
3. Check if the service is enabled to start on boot:
   - Use `systemctl is-enabled <service_name>`. If it’s not enabled, use `systemctl enable <service_name>` to configure it to start automatically on boot.
   
4. Look for missing dependencies or configuration issues:
   - If the service is failing due to configuration errors, check configuration files (usually found in `/etc/<service_name>/`) and ensure they are correct.
   
5. Restart the service:
   - Try restarting the service using `systemctl restart <service_name>` and monitor the logs again.

6. Check for system resource issues:
   - Ensure there are sufficient resources (memory, CPU, disk space) using `top`, `free -h`, and `df -h`

=================================================================

IQ] A script you wrote is failing to run on a production server, but works on your local machine. How would you investigate and fix the issue?

Answer:
1. Check for permission issues:
   - Verify if the script has the correct permissions by running `ls -l <script_name>`. Ensure the script is executable (`chmod +x <script_name>` if needed).
   
2. Compare environments:
   - Check the version of the OS, shell, and installed libraries on both your local machine and the production server. Use `uname -a`, `bash --version`, or `python --version`, depending on the script’s dependencies.

3. Review the shebang:
   - If your script starts with a shebang (e.g., `#!/bin/bash`), ensure that the specified interpreter exists on the production server in the correct location.

4. Check environment variables:
   - The production environment might have different environment variables or PATH configurations. Compare the variables using `env` on both machines.
   
5. Review logs and error messages:
   - Examine any error logs generated by the script and trace the cause of failure.

6. Test the script step-by-step:
   - Break the script down into smaller parts and test each part to see where it fails, logging outputs to help pinpoint the issue.

===============================================================

 IQ] A deployment is running slowly, and you notice that CPU usage on the server is consistently high. What steps would you take to diagnose and resolve the problem?

Answer:
1. Check system resource usage:
   - Use `top` or `htop` to check which processes are consuming the most CPU.
   
2. Check for runaway processes:
   - Identify any processes consuming excessive CPU and decide if they can be stopped or optimized.
   
3. Check I/O performance:
   - Use `iostat`, `vmstat`, or `dstat` to check for disk I/O bottlenecks that may be causing the slow performance.

4. Check for high memory usage:
   - Run `free -h` or `top` to check memory usage. If the system is swapping (i.e., using disk space for memory), you might need to optimize memory usage or increase physical RAM.

5. Optimize application or database performance:
   - If a specific application (like a web server or database) is slow, look at its logs, tweak configuration settings, and optimize queries or code.

6. Scaling or resource upgrade:
   - If necessary, you may need to scale the server (add more CPUs, RAM) or load balance traffic to reduce load on a single machine.

=============================================

 IQ] You are deploying a critical update, and you need to ensure that the rollback process is smooth in case of failure. What steps would you take to ensure this?

Answer:
1. Create backups:
   - Always create backups of configurations, databases, or any critical data before applying updates. Use tools like `rsync`, `tar`, or a database dump (`mysqldump` for MySQL).

2. Version control and changelogs:
   - Use version control (e.g., Git) for managing configuration files and scripts. Ensure that any updates are documented with a changelog so you can identify what changes need to be undone.

3. Prepare a rollback plan:
   - Write a specific plan to undo the update if necessary. This plan should include steps to restore the backup, remove or revert code changes, and restart services.

4. Use configuration management tools:
   - Leverage tools like Ansible, Puppet, or Chef to automate deployment and rollback. This ensures consistency and minimizes human error.

5. Test in staging:
   - Before deploying in production, test the update and the rollback process in a staging environment to ensure everything works as expected.

6. Monitor the update:
   - Continuously monitor the system after deployment (using tools like `top`, `uptime`, or custom monitoring solutions). If something goes wrong, you can react quickly and trigger the rollback process.

=================================================================

IQ] A server is running slow after a new application was deployed. How would you analyze and optimize the performance?

Answer:
1. Check system resource usage:
   - Use `top` or `htop` to check if the CPU, memory, or disk usage is high. Investigate the processes consuming the most resources.

2. Examine application logs:
   - Check application logs in `/var/log/` (or application-specific directories) to see if errors or warnings might indicate performance issues.
   
3. Check for database performance:
   - If the application relies on a database, run performance diagnostics (e.g., slow query logs for MySQL or PostgreSQL) to see if queries are taking too long.

4. Profile the application:
   - If you have access to the application code, use profiling tools (e.g., `strace`, `gdb`, or language-specific profilers) to understand where the bottlenecks are occurring.

5. Monitor I/O performance:
   - Use `iostat` or `vmstat` to identify disk I/O bottlenecks, which could be causing slow performance.

6. Scale resources if needed:
   - If the server is under-provisioned, consider scaling the application horizontally (adding more servers) or vertically (upgrading the hardware).

===========================================================

IQ] You are required to implement a scheduled backup of important system files on a Linux server. How would you set it up?

Answer:
1. Create a backup script:
   - Write a script using `tar`, `rsync`, or `cp` to copy important files or directories to a backup location. Example:
     
     #!/bin/bash
     tar -czf /backup/mybackup_$(date +\%F).tar.gz /important/data
     

2. Set up a cron job:
   - Edit the crontab (`crontab -e`) and add an entry to schedule the backup. Example: to run the script daily at midnight:
     
     0 0 * * * /path/to/backup-script.sh
     

3. Verify backup:
   - Ensure the backup completes successfully by checking logs or monitoring the backup destination. You can also verify the integrity of the backup by extracting and checking its contents periodically.

---

These are just a few of the potential questions you might face during a DevOps interview. They cover various areas including system administration, troubleshooting, automation, and deployment, which are all essential skills for a DevOps engineer.
